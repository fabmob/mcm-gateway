.postgres-base:
  variables:
    MODULE_NAME: postgresgateway
    MODULE_PATH: delivery/${MODULE_NAME}
    NEXUS_POSTGRES_IMAGE_NAME: ${NEXUS_DOCKER_REGISTRY}/postgres:13.6
    DATABASE_NAME: gateway
    DATABASE_USER_NAME: ${POSTGRES_ADMIN_USER}
    DATABASE_USER_PWD: ${POSTGRES_ADMIN_PASSWORD}
    DB_SERVICE_USER: $POSTGRES_SERVICE_USER
    DB_SERVICE_PASSWORD: ${POSTGRES_SERVICE_PASSWORD}
    KUBERNETES_GATEWAY_DB_NAMESPACE: ${KUBERNETES_GATEWAY_DB_NAMESPACE}

.postgres_init_vars: &postgres_init_vars |
  set -x
  export GITLAB_IMAGE_PULL_SECRET_NAME=${IMAGE_PULL_SECRET_PREFIX}-${MODULE_NAME}
  export POSTGRES_IMAGE_NAME=${REGISTRY_BASE_NAME}/postgres:${IMAGE_TAG_NAME}
  export BASE_POSTGRES_IMAGE_NAME=${NEXUS_POSTGRES_IMAGE_NAME}
  export MODULE_NAME=$MODULE_NAME
  export MODULE_PATH=$MODULE_PATH
  export DB_SERVICE_USER
  export DB_SERVICE_PASSWORD

postgres_build:
  extends:
    - .postgres-base
    - .build-job
    - .no-needs
    - .trigger-condition
  script:
    - *postgres_init_vars
  environment:
    name: ${CI_BUILD_REF_SLUG}/postgres


postgres_image_build:
  extends:
    - .image-job
    - .postgres-base
    - .trigger-condition
  environment:
    name: image/${CI_BUILD_REF_SLUG}/postgres
  script:
    - *postgres_init_vars
    - |
      image
  needs: [ "postgres_build" , "check-if-release-version" ]


postgres_preview_deploy:
  extends:
    - .preview-deploy-job
    - .postgres-base
    - .trigger-condition
  image: ${KUBETOOLS_IMAGE_TAGNAME}
  script:
    - *postgres_init_vars
    - |
      deploy
      service_name=postgresgateway
      PV_CHECK=$(kubectl get pv -o wide --all-namespaces | grep -- -`echo ${BRANCH_NAME}-${LANDSCAPE} | sed -E "s/[^-]+-(feature-|fix-)?([^_-]*).*/\2/"`- | grep "${BRANCH_NAME}-${LANDSCAPE}/postgres-volume" | awk '{ print $1 }' | head -n 1)
      if [ $PV_CHECK != "" ]
      then
        echo "### Patch the persistent volume to retain than delete for $1 ###"
        kubectl patch pv $PV_CHECK -p '{"spec":{"persistentVolumeReclaimPolicy":"Retain"}}'
      fi
  needs: [ "postgres_image_build", "commons-kubetools-image", "check-if-release-version" ]
  environment:
    on_stop: postgres_preview_cleanup


postgres_clear_database:
  extends:
    - .preview-deploy-job
    - .postgres-base
    - .manual
    - .trigger-condition
  image: ${KUBETOOLS_IMAGE_TAGNAME}
  script:
    - *postgres_init_vars
    - |
      set -x
      echo "POSTGRES CLEANING START ${BRANCH_NAME}"
      DB_POD_NAME=$(kubectl get pods -o wide -A | grep `echo $BRANCH_NAME | cut -c -17` | grep postgresgateway | awk '{ print $2 }')
      DB_NAMESPACE=$(kubectl get pods -o wide -A | grep `echo $BRANCH_NAME | cut -c -17` | grep postgresgateway | awk '{ print $1 }')
      kubectl exec $DB_POD_NAME -n $DB_NAMESPACE -c postgresgateway -- sh -c 'psql -U postgres -d gateway -c "TRUNCATE TABLE msp.adapters, msp.body, msp.body_params, msp.cache_param, msp.data_mapper, msp.headers, msp.headers_values_template, msp.msp_actions, msp.msp_calls, msp.msp_meta, msp.msp_standard, msp.params, msp.params_multi_calls, msp.price_list, msp.price_list_item, msp.selector, msp.token CONTINUE IDENTITY CASCADE;"'
  when: manual
  stage: preview-tools
  needs: [ "postgres_preview_deploy" ]

postgres_destroy_database_tables:
  extends:
    - .preview-deploy-job
    - .postgres-base
    - .manual
    - .trigger-condition
  image: ${KUBETOOLS_IMAGE_TAGNAME}
  script:
    - *postgres_init_vars
    - |
      set -x
      echo "POSTGRES CLEANING START ${BRANCH_NAME}"
      DB_POD_NAME=$(kubectl get pods -o wide -A | grep `echo $BRANCH_NAME | cut -c -17` | grep postgresgateway | awk '{ print $2 }')
      DB_NAMESPACE=$(kubectl get pods -o wide -A | grep `echo $BRANCH_NAME | grep postgresgateway | awk '{ print $1 }')
      kubectl exec $DB_POD_NAME -n $DB_NAMESPACE -c postgresgateway -- sh -c 'psql -U postgres -d gateway -c "DROP TABLE msp.adapters, msp.body, msp.body_params, msp.cache_param, msp.data_mapper, msp.headers, msp.headers_values_template, msp.msp_actions, msp.msp_calls, msp.msp_meta, msp.msp_standard, msp.params, msp.params_multi_calls, msp.price_list, msp.price_list_item, msp.selector, msp.token CASCADE;"'
  stage: preview-tools
  needs: [ "postgres_preview_deploy" ]

postgres_preview_cleanup:
  extends:
    - .preview-undeploy-job
    - .postgres-base
  script:
    - |
      delete_volume postgresgateway
      undeploy
      #TODO artifact entre ressource.yml deploiement et undeploy