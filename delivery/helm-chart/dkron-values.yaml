services:
  - metadata:
      annotations:
        app.gitlab.com/app: ${CI_PROJECT_PATH_SLUG}
        app.gitlab.com/env: ${CI_ENVIRONMENT_SLUG}
        kompose.image-pull-secret: ${PROXY_HANDOVER_IMAGE_PULL_SECRET_NAME}
        kompose.service.type: clusterip
        kubernetes.io/ingress.class: traefik
      labels:
        io.kompose.service: dkron
      name: dkron
    spec:
      ports:
        - name: "8888"
          port: 8888
          targetPort: 8080
      selector:
        io.kompose.service: dkron
      type: ClusterIP
    status:
      loadBalancer: {}

networkPolicies:
  - metadata:
      annotations:
        app.gitlab.com/app: ${CI_PROJECT_PATH_SLUG}
        app.gitlab.com/env: ${CI_ENVIRONMENT_SLUG}
        kubernetes.io/ingress.class: traefik
      name: deny-internal-services-nw
    spec:
      podSelector: { }
      policyTypes:
        - Ingress
  - metadata:
      annotations:
        app.gitlab.com/app: ${CI_PROJECT_PATH_SLUG}
        app.gitlab.com/env: ${CI_ENVIRONMENT_SLUG}
        kubernetes.io/ingress.class: traefik
      name: ingress-internal-policy
    spec:
      podSelector:
        matchLabels:
          visibility: external
      ingress:
        - from:
            - namespaceSelector:
                matchLabels:
                  com.mcm.maas.internal: "true"
        - from:
            - namespaceSelector:
                matchLabels:
                  com.mcm.maas.apim: "true"
              podSelector:
                matchLabels:
                  app.kubernetes.io/component: gateway

deployments:
  - metadata:
      annotations:
        app.gitlab.com/app: ${CI_PROJECT_PATH_SLUG}
        app.gitlab.com/env: ${CI_ENVIRONMENT_SLUG}
        kompose.image-pull-secret: ${PROXY_HANDOVER_IMAGE_PULL_SECRET_NAME}
        kompose.service.type: clusterip
        kubernetes.io/ingress.class: traefik
      labels:
        io.kompose.service: dkron
      name: dkron
    spec:
      replicas: 1
      selector:
        matchLabels:
          io.kompose.service: dkron
      strategy: {}
      template:
        metadata:
          annotations:
            app.gitlab.com/app: ${CI_PROJECT_PATH_SLUG}
            app.gitlab.com/env: ${CI_ENVIRONMENT_SLUG}
            kompose.image-pull-secret: ${PROXY_HANDOVER_IMAGE_PULL_SECRET_NAME}
            kompose.service.type: clusterip
            kubernetes.io/ingress.class: traefik
          labels:
            io.kompose.service: dkron
            visibility: external
        spec:
          containers:
            image: dkron/dkron:latest
            name: dkron
            ports:
              - containerPort: 8080
            resources: {}
            args: [ "agent", "--node-name=node1", "--bootstrap-expect=1", "--server", "--disable-usage-stats"]
            volumeMounts:
              - mountPath: /dkron.data
                name: dkron-data-volume
          imagePullSecrets:
            - name: ${PROXY_HANDOVER_IMAGE_PULL_SECRET_NAME}
          restartPolicy: Always
          volumes:
            - name: dkron-data-volume
              persistentVolumeClaim:
                claimName: dkron-data-volume
    status: {}


persistentVolumeClaim:
  - metadata:
      annotations:
        app.gitlab.com/app: ${CI_PROJECT_PATH_SLUG}
        app.gitlab.com/env: ${CI_ENVIRONMENT_SLUG}
      labels:
        io.kompose.service: dkron-data-volume
      name: dkron-data-volume
    spec:
      accessModes:
        - ReadWriteOnce
      resources:
        requests:
          storage: 1Gi

middlewares:
  - metadata:
      annotations:
        app.gitlab.com/app: ${CI_PROJECT_PATH_SLUG}
        app.gitlab.com/env: ${CI_ENVIRONMENT_SLUG}
        kubernetes.io/ingress.class: traefik
      name: dkron-headers-middleware
    spec:
      headers:
        customRequestHeaders:
          X-Forwarded-Port: "443"
          X-Forwarded-Proto: https

  - metadata:
      annotations:
        app.gitlab.com/app: ${CI_PROJECT_PATH_SLUG}
        app.gitlab.com/env: ${CI_ENVIRONMENT_SLUG}
        kubernetes.io/ingress.class: traefik
      name: dkron-inflightreq-middleware
    spec:
      inFlightReq:
        amount: 100

ingressRoutes:
  - metadata:
      annotations:
        app.gitlab.com/app: ${CI_PROJECT_PATH_SLUG}
        app.gitlab.com/env: ${CI_ENVIRONMENT_SLUG}
        kubernetes.io/ingress.class: traefik
      name: dkron
    spec:
      entryPoints:
        - web
      routes:
        - kind: Rule
          match: Host(`${DKRON_FQDN}`)
          middlewares:
            - name: dkron-headers-middleware
            - name: dkron-inflightreq-middleware
          services:
            - kind: Service
              name: dkron
              port: 8888

#networkPolicies:
#  - metadata:
#      annotations:
#        app.gitlab.com/app: ${CI_PROJECT_PATH_SLUG}
#        app.gitlab.com/env: ${CI_ENVIRONMENT_SLUG}
#        kubernetes.io/ingress.class: traefik
#      name: internal-services-nw
#    spec:
#      ingress:
#        - from:
#            - namespaceSelector:
#                matchLabels:
#                  com.mcm.maas.ingress: "true"
#      podSelector:
#        matchLabels:
#          io.kompose.network/internal-services-nw: "true"
