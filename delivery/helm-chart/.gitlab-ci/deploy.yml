# --- Function helpers to deploy and wait for module dependencies---

.helm-deploy-function: &helm-deploy-function |
  function get_release_name {
    env
    echo "### get_release_name  ###"
    echo "GATEWAY_CHART_RELEASE_VERSION=$GATEWAY_CHART_RELEASE_VERSION"
    echo "GATEWAY_RELEASE_VERSION=$GATEWAY_RELEASE_VERSION"
  
    # check the name of the release version if real release of feature branch. 
    if [[ "$GATEWAY_RELEASE_VERSION" =~ ^(release-)?([0-9]+\.[0-9]+)\.([0-9]+)$ ]]
    then
      export HELM_CHART_VERSION=${GATEWAY_CHART_RELEASE_VERSION}
      IS_RELEASE=true
    else
      export CI_BUILD_REF_SLUG=`echo ${CI_BUILD_REF_SLUG} | sed -E "s/(^release-)//"`
      export RELEASE_VERSION=`echo ${CI_COMMIT_REF_NAME} | sed -E "s/(^release-)//"`
      export HELM_CHART_VERSION=0.0.4
      IS_RELEASE=false
    fi
    echo "********** release version = $RELEASE_VERSION"
  
  
    if [[ "${IS_RELEASE}" == "true" || "$IS_FIXED_NAMESPACE" == "true" ]]
    then
      export BASE_KUBE_NAMESPACE_WITH_BRANCH=${BASE_KUBE_NAMESPACE}
    else 
      export BASE_KUBE_NAMESPACE_WITH_BRANCH=`echo "${CI_COMMIT_REF_SLUG}" | sed -E "s/(^release-)//" | sed -E 's/(feature-|fix-)?([^_-]+)/\2/'`-${BASE_KUBE_NAMESPACE}
    fi
  
  }

  function color {
    # Reset
    RESET='\033[0m'                # Text Reset

    # Regular Colors
    BLACK='\033[0;30m'             # Black
    RED='\033[0;31m'               # Red
    GREEN='\033[0;32m'             # Green
    YELLOW='\033[0;33m'            # Yellow
    BLUE='\033[0;34m'              # Blue
    PINK='\033[0;35m'              # Pink
    CYAN='\033[0;36m'              # Cyan
    WHITE='\033[0;37m'             # White

    # Bold
    B_BLACK='\033[1;30m'            # Black
    B_RED='\033[1;31m'              # Red
    B_GREEN='\033[1;32m'            # Green
    B_YELLOW='\033[1;33m'           # Yellow
    B_BLUE='\033[1;34m'             # Blue
    B_PINK='\033[1;35m'             # Pink
    B_CYAN='\033[1;36m'             # Cyan
    B_WHITE='\033[1;37m'            # White
  }
  
  function set_cluster_context {
    if [[ "$CI_JOB_NAME" == *"_preview"* ||  "$CI_JOB_NAME" == *"_testing"* ]]; then kubectl config use-context "$DEV_KUBE_CONTEXT"; fi
    if [[ "$CI_JOB_NAME" == *"_preprod"* ]]; then kubectl config use-context "$PPRD_KUBE_CONTEXT"; fi
    if [[ "$CI_JOB_NAME" == *"_prod"* ]]; then kubectl config use-context "$PROD_KUBE_CONTEXT"; fi
  }
  
  function get_cluster_context {
    kubectl config get-contexts
  }
  function pod_namespace {
    service_name=$1
    kubectl get pods -o wide --all-namespaces | grep -- -`echo ${KUBE_NAMESPACE} | sed -E "s/[^-]+-(feature-|fix-)?([^_-]*).*/\2/"`- | grep $service_name | awk '{ print $1 }' | head -n 1
  }
  
  function wait_pod {
    while [[ $(pod_namespace $1) == "" ]]
    do
      echo "Wait $1 try"
      sleep 5
    done
  }
  
  function helm_deploy {
    echo "Context of deployment"
    set_cluster_context
    get_cluster_context
  
    MODULE_NAME=$1
    echo "helm_deploy Traitement du MODULE_NAME=$MODULE_NAME"
    get_release_name
  
    color
    export KUBE_NAMESPACE=${MODULE_NAME}-${BASE_KUBE_NAMESPACE_WITH_BRANCH}
    echo "CREATING NAMESPACE ${KUBE_NAMESPACE}"

    RES=`kubectl get namespaces | grep "^${KUBE_NAMESPACE} " -c` > /dev/null 2>&1 || FAILED=true
    echo "namespace ${KUBE_NAMESPACE} trouve $RES fois"

    SHOUD_CREATE_NAMESPACE=0
    if [ "$RES" == "0" ]
    then
      echo "namespace ${KUBE_NAMESPACE} not existing yet"
      SHOUD_CREATE_NAMESPACE=1;
    else
      if [ "$MODULE_NAME" == "gravitee-apim" ]
      then
        kubectl delete namespace ${KUBE_NAMESPACE}
        SHOUD_CREATE_NAMESPACE=1;
      fi
    fi
  
    if [ $SHOUD_CREATE_NAMESPACE -eq 1 ]
    then
      kubectl create namespace ${KUBE_NAMESPACE}
    fi
  
    export PROXY_IMAGE_PULL_SECRET_NAME=${PROXY_IMAGE_PULL_SECRET_PREFIX}-${MODULE_NAME}
    export PROXY_HANDOVER_IMAGE_PULL_SECRET_NAME=${PROXY_IMAGE_PULL_SECRET_HANDOVER_PREFIX}-${MODULE_NAME}

    # create secret to pull images from registry that contain web services docker images when deploying kubernetes services
    kubectl create secret docker-registry ${PROXY_IMAGE_PULL_SECRET_NAME} --docker-server="$NEXUS_DOCKER_REGISTRY_URL" --docker-username="$NEXUS_ROOT_USER_NAME" --docker-password="$NEXUS_ROOT_USER_PWD" --docker-email="$GITLAB_USER_EMAIL" -o yaml --dry-run=client | kubectl apply --namespace=${KUBE_NAMESPACE} -f -

    # create secret to pull images from handover registry
    kubectl --namespace $KUBE_NAMESPACE create secret docker-registry ${PROXY_HANDOVER_IMAGE_PULL_SECRET_NAME} --docker-server="$NEXUS_DOCKER_REGISTRY_HANDOVER_GATEWAY_URL" --docker-username="$NEXUS_ROOT_USER_NAME" --docker-password="$NEXUS_ROOT_USER_PWD" --docker-email="$GITLAB_USER_EMAIL" -o yaml --dry-run=client | kubectl apply --namespace=${KUBE_NAMESPACE} -f -
  
    echo -e "$B_PINK Liste des variables d'env"
    env
    echo -e " -------- fin de la liste --------$RESET"

    echo "Deploying ${MODULE_NAME} for ${CI_ENVIRONMENT_NAME}, subdomain ${LANDSCAPE}..."


    export MODULE_PATH=${MODULE_NAME}
  
    # HELM ADD REPO
    helm repo add Gateway-Helm-chart-repo ${NEXUS_HELM_REGISTRY} --username "$NEXUS_USER_NAME" --password "$NEXUS_USER_PWD"
  
    # clear the chart folder if already preset
    if [ -d "gateway-${HELM_CHART_VERSION}.tgz" ]
    then
      echo "folder gateway-${HELM_CHART_VERSION}.tgz does exists"
      rm -rf gateway-${RELEASE_VERSION}.tgz
    else 
      echo "folder gateway-${HELM_CHART_VERSION}.tgz does not exists"
    fi
  
    # download chart
    if [ -f "gateway-${HELM_CHART_VERSION}.tgz" ]
    then
      echo "Chart ${NEXUS_HELM_REGISTRY}/gateway-${HELM_CHART_VERSION}.tgz already exist"
    else
      # HELM PULL CHART
      helm pull ${NEXUS_HELM_REGISTRY}/gateway-${LANDSCAPE_ENV}-${HELM_CHART_VERSION}.tgz --version ${HELM_CHART_VERSION} --untar --username "$NEXUS_USER_NAME" --password "$NEXUS_USER_PWD"
      ls -lR --color
    fi
  
    ls -lR gateway*
  
    # SUBSTITUTE VARIABLES FOR ALL MODULE_NAME-VALUES FILE
    envsubst "$(env | cut -d= -f1 | sed -e 's/^/$/')" < gateway-${LANDSCAPE_ENV}/${MODULE_NAME}-values.yaml > gateway-${LANDSCAPE_ENV}/${MODULE_NAME}-values.yaml.tmp && mv gateway-${LANDSCAPE_ENV}/${MODULE_NAME}-values.yaml.tmp gateway-${LANDSCAPE_ENV}/${MODULE_NAME}-values.yaml
  
    echo "-----------gateway-${LANDSCAPE_ENV}/${MODULE_NAME}-values.yaml ----------"
    cat gateway-${LANDSCAPE_ENV}/${MODULE_NAME}-values.yaml
    echo "-------------------------------------"

    echo -e "----------------- $B_PINK module_name ${MODULE_NAME} $RESET"
    if [ $MODULE_NAME == "gravitee-apim" ]
    then
      echo -e "----------------- $B_PINK in condition: $MODULE_NAME $RESET"

      # ______________________________________________________________
      # Ajout de Gravitee.io Helm charts repo
      # ______________________________________________________________
      echo -e "******* ${B_YELLOW}Add the Gravitee.io Helm charts repo ... -f ${RESET}"
      # TODO : voir comment utiliser gravitee.yml téléchargé dans template
      helm repo add graviteeio https://helm.gravitee.io

      echo -e "$B_RED list helm"
      echo "helm list --all-namespaces"
      helm list --all-namespaces
      echo "end list namespaces $RESET"

      RES=`helm list --namespace ${KUBE_NAMESPACE} --output json`
      echo -e "${B_YELLOW} namespace '${KUBE_NAMESPACE}' trouve ${#RES[@]} fois $RESET"

      # ______________________________________________________________
      # On désinstalle les namespaces déjà utilisés pour les recréer
      # ______________________________________________________________

      if [  ${#RES[@]} != "0" ]
      then
        echo -e "${B_YELLOW} dans le if $RESET"
        # uninstall namespace only if already existing

        POD_NUMBER=`kubectl get pod --namespace "${KUBE_NAMESPACE}" | grep "^graviteeio-apim3x" -c` > /dev/null 2>&1 || FAILED=true
        if [ "$POD_NUMBER" != "0" ]
        then
          helm uninstall -n ${KUBE_NAMESPACE} graviteeio-apim3x
          #helm uninstall -n ${KUBE_NAMESPACE} graviteeio-apim3x
        fi

        #POD_NUMBER=`kubectl get pod --namespace "${KUBE_NAMESPACE}" | grep "^graviteeio-apim-elasticsearch" -c` > /dev/null 2>&1 || FAILED=true
        #if [ "$POD_NUMBER" != "0" ]
        #then
        #  #helm uninstall -n ${KUBE_NAMESPACE} graviteeio-apim-elasticsearch
        #fi

        POD_NUMBER=`kubectl get pod --namespace "${KUBE_NAMESPACE}" | grep "^elasticsearch-gravitee" -c` > /dev/null 2>&1 || FAILED=true
        if [ "$POD_NUMBER" != "0" ]
        then
          helm uninstall -n ${KUBE_NAMESPACE} elasticsearch-gravitee
        fi
      else
        echo "else"
      fi
      echo "__________________________ end uninstall"



      # ______________________________________________________________
      # INSTALLER ELASTICSEARCH
      # ______________________________________________________________
      echo -e "${B_YELLOW} Install ElasticSearch $RESET"
      # Ajout du helm repo pour Bitnami pour install des charts
      helm repo add bitnami https://charts.bitnami.com/bitnami
      #helm install graviteeio-apim-elasticsearch bitnami/elasticsearch --create-namespace --namespace ${KUBE_NAMESPACE}
      #helm install elasticsearch-gravitee bitnami/elasticsearch --create-namespace --namespace ${KUBE_NAMESPACE}
      helm install elasticsearch-gravitee bitnami/elasticsearch --create-namespace --namespace ${KUBE_NAMESPACE} --set replicas=1,minimumMasterNodes=1 --set image.tag=7.16.3

      echo -e "$B_PINK list repo helm"
      helm repo list
      echo -e "____________________ end $RESET"

      # ______________________________________________________________
      # INSTALLER les Charts GRAVITEE
      # ______________________________________________________________
      echo -e "******* ${B_YELLOW}install the chart from the Helm repo with the release name graviteeio-apim3x -f ${RESET}"
      echo -e "$B_BLUE new namespace ${KUBE_NAMESPACE} $RESET"
  
      echo "HELM CHART FOR GRAVITEE"
      cat gateway-${LANDSCAPE_ENV}/gravitee-apim-values.yaml
  
      envsubst "$(env | cut -d= -f1 | sed -e 's/^/$/')" < gateway-${LANDSCAPE_ENV}/${MODULE_NAME}-values.yaml > gateway-${LANDSCAPE_ENV}/${MODULE_NAME}-values.yaml.tmp && mv gateway-${LANDSCAPE_ENV}/${MODULE_NAME}-values.yaml.tmp gateway-${LANDSCAPE_ENV}/${MODULE_NAME}-values.yaml
      echo "-----------gateway-${LANDSCAPE_ENV}/${MODULE_NAME}-values.yaml ----------"
      cat gateway-${LANDSCAPE_ENV}/${MODULE_NAME}-values.yaml
  
      helm install graviteeio-apim3x graviteeio/apim3 --create-namespace --namespace ${KUBE_NAMESPACE} -f gateway-${LANDSCAPE_ENV}/gravitee-apim-values.yaml

    else
      echo -e "----------------- $B_PINK not in condition : ${MODULE_NAME} $RESET"
    fi

    echo -e "**************** ${B_YELLOW}end config helm"
  
    echo "check which is current cluster"
    kubectl cluster-info
  
    # HELM UPDATE REPO WITH LOCAL CHART
    helm repo update

    # HELM UPGRADE NEW PACKAGE
    helm upgrade --install --version ${HELM_CHART_VERSION} gateway Gateway-Helm-chart-repo/gateway-${LANDSCAPE_ENV} -n ${KUBE_NAMESPACE} -f gateway-${LANDSCAPE_ENV}/${MODULE_NAME}-values.yaml

    echo "Setting labels"
    if [ $MODULE_NAME == "gravitee-apim" ]
    then
  
      wait_pod graviteeio-apim3x-portal
      for POD in `kubectl get pod --namespace "${KUBE_NAMESPACE}" | tail -n+2 | grep "graviteeio-apim3x-portal" | awk '{ print $1 }'`
      do
        kubectl label --overwrite pods $POD -n ${KUBE_NAMESPACE} visibility=external
      done;
  
      wait_pod graviteeio-apim3x-api
      for POD in `kubectl get pod --namespace "${KUBE_NAMESPACE}" | tail -n+2 | grep "graviteeio-apim3x-api" | awk '{ print $1 }'`
      do
        kubectl label --overwrite pods $POD -n ${KUBE_NAMESPACE} visibility=external
      done;
  
      wait_pod graviteeio-apim3x-ui
      for POD in `kubectl get pod --namespace "${KUBE_NAMESPACE}" | tail -n+2 | grep "graviteeio-apim3x-ui" | awk '{ print $1 }'`
      do
        kubectl label --overwrite pods $POD -n ${KUBE_NAMESPACE} visibility=external
      done;
  
      wait_pod graviteeio-apim3x-gateway
      for POD in `kubectl get pod --namespace "${KUBE_NAMESPACE}" | tail -n+2 | grep "graviteeio-apim3x-gateway" | awk '{ print $1 }'`
      do
        kubectl label --overwrite pods $POD -n ${KUBE_NAMESPACE} visibility=external
      done;
  
      kubectl label --overwrite namespace ${KUBE_NAMESPACE} com.mcm.maas.apim=true
  
      echo "installing middleware"
      envsubst "$(env | cut -d= -f1 | sed -e 's/^/$/')" < security/security-apim-middleware.yaml > security/security-apim-middleware.yaml.tmp && mv security/security-apim-middleware.yaml.tmp security/security-apim-middleware.yaml
      kubectl apply -f security/security-apim-middleware.yaml -n ${KUBE_NAMESPACE}
  
      echo "installing ingress routes"
      for INGRESS_FILE in `ls security/ingress/*-ingressRoute.yaml`
      do
        echo "installing $INGRESS_FILE"
        envsubst "$(env | cut -d= -f1 | sed -e 's/^/$/')" < ${INGRESS_FILE} > ${INGRESS_FILE}.tmp && mv ${INGRESS_FILE}.tmp ${INGRESS_FILE}
  
        kubectl apply -f $INGRESS_FILE -n ${KUBE_NAMESPACE}
      done;
  
      wait_pod graviteeio-apim3x-portal
      wait_pod graviteeio-apim3x-gateway
      wait_pod graviteeio-apim3x-ui
      wait_pod graviteeio-apim3x-api
  
      kubectl apply -f security/internal-deny-all-policy.yaml -n ${KUBE_NAMESPACE}      
      kubectl apply -f security/apim-external-policy.yaml -n ${KUBE_NAMESPACE}
      kubectl apply -f security/apim-elastic-policy.yaml -n ${KUBE_NAMESPACE}
      kubectl apply -f security/apim-internal-policy.yaml -n ${KUBE_NAMESPACE}
    else
      POD_NAME=`kubectl get pod --namespace "${KUBE_NAMESPACE}" | tail -n+2 | awk '{ print $1 }'`
      kubectl label --overwrite namespace ${KUBE_NAMESPACE} com.mcm.maas.internal=true
  
      #retain dkron volume
      if [[ "$MODULE_NAME" == "dkron" ]] 
      then
        echo "Retain persistant volume for dkron"
        PV_CHECK=`kubectl get pv -o wide --all-namespaces | grep "${KUBE_NAMESPACE}/dkron-data-volume" | awk '{ print $1 }' | head -n 1`
        echo "PV_CHECK $PV_CHECK" 
        if [[ $PV_CHECK != "" ]]
        then
          echo "### Patch the persistent volume to retain than delete for $1 ###"
          kubectl patch pv $PV_CHECK -p '{"spec":{"persistentVolumeReclaimPolicy":"Retain"}}'
        else
          echo "persistant volume already set $PV_CHECK"
        fi
      fi
  
      echo "no label to set"
    fi
  
    # check context !!
    kubectl config get-contexts
  }

# --- Job template to deploy helm chart with helm and kubectl image ---

.helm-deploy-job:
  image: dtzar/helm-kubectl:3.9.2
  extends:
    - .helm-chart-base
  before_script:
    - *helm-deploy-function
    - |
      echo "ENV_URL=https://${MODULE_NAME}-${RELEASE_VERSION_SLUG}.${LANDSCAPE}.${BASE_DOMAIN}" > ${MODULE_NAME}-deployment.env
  script:
    - |
      get_release_name
      helm_deploy
  #  artifacts:
  #    reports:
  #      dotenv: ${MODULE_PATH:-${MODULE_NAME}}-deployment.env
  environment:
    name: ${CI_COMMIT_REF_SLUG}-${LANDSCAPE}/${MODULE_NAME}
    url: ${ENV_URL}

# --- Deploy each modules ---



include:
  - local: ".gitlab-ci/deploy-testing.yml"
  - local: ".gitlab-ci/deploy-preview.yml"
  - local: ".gitlab-ci/deploy-preprod.yml"
  - local: ".gitlab-ci/deploy-production.yml"
