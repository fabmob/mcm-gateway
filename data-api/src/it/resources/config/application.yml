logging:
  level:
    org:
      springframework: INFO
      springframework.security: INFO
      springframework.web: INFO
      springframework.scheduling.concurrent: WARN
    root: INFO

spring:
  application:
    name: database
  lifecycle:
    timeout-per-shutdown-phase: "10s"
  profiles:
    active: test
  datasource:
    continue-on-error: true
    hikari:
      minimumIdle: 3
      connectionTimeout: 30000
      maximumPoolSize: 12
      idleTimeout: 30000
      poolName: PerimGabaritHikariCP
      maxLifetime: 2000000
    initialization-mode: always
    url: jdbc:postgresql://localhost:5432/gateway-tests
    password: ${POSTGRES_TEST_USER:@test.database.password@}
    username: ${POSTGRES_TEST_PASSWORD:@test.database.username@}

  jpa:
    show-sql: ${SHOW_SQL:false}
    hibernate:
      ddl-auto: update
    properties:
      hibernate:
        hbm2dll:
          create_namespaces: true
        default_schema: msp
        jdbc:
          lob:
            non_contextual_creation: true
        dialect: org.hibernate.dialect.PostgreSQLDialect
        enable_lazy_load_no_trans: true
  data:
    rest:
      basePath: #/api
      detection-strategy: all
  redis:
    ssl: ${MAAS_API_CACHE_SSL:false}
    password: ${MAAS_API_CACHE_PASSWORD:}
    host: ${MAAS_API_CACHE_HOST:localhost}
    port: ${MAAS_API_CACHE_PORT:6379}
    connection-timeout: 30
    keys:
      prefix: ${MAAS_API_CACHE_KEYS_PREFIX:local}
    repositories:
      enabled: 'false'
  cache:
    type: redis
  main:
    # To be removed if circular dependencies can be resolved in this project's services
    allow-circular-references: true

---

gateway:
  service:
    dataapi:
      baseUrl: "http://${DATA_API_HOST:localhost}:8081${DATA_API_CONTEXT_PATH:/dataapi/v1}"
    routingapi:
      baseurl: "http://${ROUTING_API_HOST:localhost}:8082/v1/route"
    cachemanager:
      baseUrl: "http://${CACHE_MANAGER_HOST:localhost}:8086/v1/cache"