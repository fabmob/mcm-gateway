package com.gateway.database.model;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

import javax.persistence.*;
import java.util.Set;
import java.util.UUID;

/**
 * MspMeta generated by hbm2java
 */
@Entity
@Data
@AllArgsConstructor
@NoArgsConstructor
@Table(name = "partner_meta", schema = "msp")
public class PartnerMeta implements java.io.Serializable {

    /**
     *
     */
    private static final long serialVersionUID = 1L;
    @Id
    @GeneratedValue
    @Column(name = "partner_id ", unique = true, nullable = false)
    private UUID partnerId;
    @Column(name = "partner_type", nullable = false)
    private String partnerType;
    @Column(name = "name", length = 50, nullable = false)
    private String name;
    @Column(name = "operator", length = 50)
    private String operator;
    @Column(name = "type", length = 20)
    private String type;
    @Column(name = "url", length = 200)
    private String url;
    @Column(name = "url_webview")
    private Boolean urlWebview;
    @Column(name = "logo_url", length = 200)
    private String logoUrl;
    @Column(name = "logo_format", length = 4)
    private String logoFormat;
    @Column(name = "primary_color", length = 10)
    private String primaryColor;
    @Column(name = "secondary_color", length = 10)
    private String secondaryColor;

    @OneToOne(fetch = FetchType.EAGER, cascade = CascadeType.ALL)
    private PriceList priceList;

    @Column(name = "is_enabled")
    private Boolean isEnabled;
    @Column(name = "has_vehicle")
    private Boolean hasVehicle;
    @Column(name = "has_station")
    private Boolean hasStation;
    @Column(name = "has_station_status")
    private Boolean hasStationStatus;
    @Column(name = "has_operating_zone")
    private Boolean hasOperatingZone;
    @Column(name = "has_no_parking_zone")
    private Boolean hasNoParkingZone;
    @Column(name = "has_pref_parking_zone")
    private Boolean hasPrefParkingZone;
    @Column(name = "has_speed_limit_zone")
    private Boolean hasSpeedLimitZone;
    @Column(name = "has_parking")
    private Boolean hasParking;
    @Column(name = "has_hold")
    private Boolean hasHold;

    @Column(name = "has_vehicle_types")
    private Boolean hasVehicleTypes;
    @Column(name = "has_pricing_plan")
    private Boolean hasPricingPlan;

    @Column(name = "has_carpooling_booking_post")
    private Boolean hasCarpoolingBookingPost;
    @Column(name = "has_carpooling_booking_patch")
    private Boolean hasCarpoolingBookingPatch;
    @Column(name = "has_carpooling_booking_get")
    private Boolean hasCarpoolingBookingGet;
    @Column(name = "has_carpooling_booking_event")
    private Boolean hasCarpoolingBookingEvent;
    @Column(name = "has_carpooling_driver_journey")
    private Boolean hasCarpoolingDriverJourney;
    @Column(name = "has_carpooling_passenger_journey")
    private Boolean hasCarpoolingPassengerJourney;
    @Column(name = "has_carpooling_driver_trip")
    private Boolean hasCarpoolingDriverTrip;
    @Column(name = "has_carpooling_passenger_trip")
    private Boolean hasCarpoolingPassengerTrip;
    @Column(name = "has_carpooling_messages")
    private Boolean hasCarpoolingMessages;
    @Column(name = "has_carpooling_status")
    private Boolean hasCarpoolingStatus;
    @Column(name = "has_ping")
    private Boolean hasPing;
    @Column(name = "has_aroundme")
    private Boolean hasAroundMe;


    @OneToOne(fetch = FetchType.EAGER, mappedBy = "partner", cascade = CascadeType.REMOVE)
    private Token token;

    @OneToMany(mappedBy = "id.partner", cascade = CascadeType.REMOVE)
    private Set<PartnerStandard> standard;

}
