services:
  - metadata:
      annotations:
        app.gitlab.com/app: ${CI_PROJECT_PATH_SLUG}
        app.gitlab.com/env: ${CI_ENVIRONMENT_SLUG}
        kompose.image-pull-secret: ${PROXY_HANDOVER_IMAGE_PULL_SECRET_NAME}
        kompose.service.type: clusterip
        kubernetes.io/ingress.class: traefik
      labels:
        io.kompose.service: data-api
        app.gateway.com/service-type: internal-service
      name: data-api
    spec:
      ports:
        - name: "8081"
          port: 8081
          targetPort: 8081
      selector:
        io.kompose.service: data-api
      type: ClusterIP
    status:
      loadBalancer: {}

networkPolicies:
  - metadata:
      annotations:
        app.gitlab.com/app: ${CI_PROJECT_PATH_SLUG}
        app.gitlab.com/env: ${CI_ENVIRONMENT_SLUG}
        kubernetes.io/ingress.class: traefik
      name: deny-internal-services-nw
    spec:
      podSelector: { }
      policyTypes:
        - Ingress
  - metadata:
      annotations:
        app.gitlab.com/app: ${CI_PROJECT_PATH_SLUG}
        app.gitlab.com/env: ${CI_ENVIRONMENT_SLUG}
        kubernetes.io/ingress.class: traefik
      name: ingress-internal-policy
    spec:
      podSelector:
        matchLabels:
          visibility: external
      ingress:
        - from:
            - namespaceSelector:
                matchLabels:
                  com.mcm.maas.internal: "true"
        - from:
            - namespaceSelector:
                matchLabels:
                  com.mcm.maas.apim: "true"
              podSelector:
                matchLabels:
                  app.kubernetes.io/component: gateway
        - from:
            - namespaceSelector:
                matchLabels:
                  name: monitoring

deployments:
  - metadata:
      annotations:
        app.gitlab.com/app: ${CI_PROJECT_PATH_SLUG}
        app.gitlab.com/env: ${CI_ENVIRONMENT_SLUG}
        kompose.image-pull-secret: ${PROXY_HANDOVER_IMAGE_PULL_SECRET_NAME}
        kompose.service.type: clusterip
        kubernetes.io/ingress.class: traefik
      labels:
        io.kompose.service: data-api
      name: data-api
    spec:
      replicas: 2
      selector:
        matchLabels:
          io.kompose.service: data-api
      strategy: {}
      template:
        metadata:
          annotations:
            app.gitlab.com/app: ${CI_PROJECT_PATH_SLUG}
            app.gitlab.com/env: ${CI_ENVIRONMENT_SLUG}
            kompose.image-pull-secret: ${PROXY_HANDOVER_IMAGE_PULL_SECRET_NAME}
            kompose.service.type: clusterip
            kubernetes.io/ingress.class: traefik
          labels:
            io.kompose.service: data-api
            visibility: external
        spec:
          containers:
            env:
              CACHE_MANAGER_HOST: cache-manager.cache-manager-${BASE_KUBE_NAMESPACE_WITH_BRANCH}.svc.cluster.local
              SERVICE_BASE_PATH: ${DATA_API_FQDN}
              DATABASE_HOST: ${DATABASE_HOST}
              DATABASE_PASSWORD: ${DATABASE_USER_PWD}
              DATABASE_USERNAME: ${DATABASE_USER_NAME}
              MAAS_API_CACHE_SSL: true
              MAAS_API_CACHE_HOST: ${MAAS_API_CACHE_HOST}
              MAAS_API_CACHE_PORT: ${MAAS_API_CACHE_PORT}
              MAAS_API_CACHE_KEYS_PREFIX: "${MAAS_API_CACHE_KEYS_PREFIX}"
              MAAS_API_CACHE_PASSWORD: "${MAAS_API_CACHE_PASSWORD}"
              USE_CACHE: false
              DATA_API_CONTEXT_PATH: "/dataapi/v1"
              LOG_LEVEL_SPRING: ${LOG_LEVEL_SPRING}
              LOG_LEVEL_GATEWAY: ${LOG_LEVEL_GATEWAY}
              ELASTIC_APM_SERVICE_NAME: data-api
              ELASTIC_APM_APPLICATION_PACKAGES: com.gateway,org.springframework
              ELASTIC_APM_SERVER_URL: http://apm-server.elasticsearch-${BASE_KUBE_NAMESPACE_WITH_BRANCH}.svc.cluster.local:8200
              ELASTIC_APM_ENVIRONMENT: ${LANDSCAPE_ENV}
            image: ${DATA_API_IMAGE_NAME}
            name: data-api
            ports:
              - containerPort: 8081
            resources: {}
          imagePullSecrets:
            - name: ${PROXY_HANDOVER_IMAGE_PULL_SECRET_NAME}
          restartPolicy: Always
    status: {}

middlewares:
  - metadata:
      annotations:
        app.gitlab.com/app: ${CI_PROJECT_PATH_SLUG}
        app.gitlab.com/env: ${CI_ENVIRONMENT_SLUG}
        kubernetes.io/ingress.class: traefik
      name: data-api-headers-middleware
    spec:
      headers:
        customRequestHeaders:
          X-Forwarded-Port: "443"
          X-Forwarded-Proto: https

  - metadata:
      annotations:
        app.gitlab.com/app: ${CI_PROJECT_PATH_SLUG}
        app.gitlab.com/env: ${CI_ENVIRONMENT_SLUG}
        kubernetes.io/ingress.class: traefik
      name: data-api-inflightreq-middleware
    spec:
      inFlightReq:
        amount: 100

#  - metadata:
#      annotations:
#        app.gitlab.com/app: ${CI_PROJECT_PATH_SLUG}
#        app.gitlab.com/env: ${CI_ENVIRONMENT_SLUG}
#        kubernetes.io/ingress.class: traefik
#      name: data-api-ratelimit-middleware
#    spec:
#      rateLimit:
#        average: 30
#        burst: 50
#        period: 1m
#        sourceCriterion:
#          ipStrategy:
#            depth: 2

ingressRoutes:
  - metadata:
      annotations:
        app.gitlab.com/app: ${CI_PROJECT_PATH_SLUG}
        app.gitlab.com/env: ${CI_ENVIRONMENT_SLUG}
        kubernetes.io/ingress.class: traefik
      name: data-api
    spec:
      entryPoints:
        - web
      routes:
        - kind: Rule
          match: Host(`${DATA_API_FQDN}`)
          middlewares:
            - name: data-api-headers-middleware
#            - name: data-api-ratelimit-middleware
            - name: data-api-inflightreq-middleware
          services:
            - kind: Service
              name: data-api
              port: 8081
